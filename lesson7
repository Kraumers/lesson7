"""
1.  Написать скрипт, создающий стартер (заготовку) для проекта со следующей структурой папок:
    |--my_project
       |--settings
       |--mainapp
       |--adminapp
       |--authapp
    Примечание: подумайте о ситуации, когда некоторые папки уже есть на диске (как быть?);
    как лучше хранить конфигурацию этого стартера, чтобы в будущем можно было менять имена папок под конкретный проект;
    можно ли будет при этом расширять конфигурацию и хранить данные о вложенных папках и файлах (добавлять детали)?
2.  *(вместо 1) Написать скрипт, создающий из config.yaml стартер для проекта со следующей структурой:
    |--my_project
       |--settings
       |  |--__init__.py
       |  |--dev.py
       |  |--prod.py
       |--mainapp
       |  |--__init__.py
       |  |--models.py
       |  |--views.py
       |  |--templates
       |     |--mainapp
       |        |--base.html
       |        |--index.html
       |--authapp
       |  |--__init__.py
       |  |--models.py
       |  |--views.py
       |  |--templates
       |     |--authapp
       |        |--base.html
       |        |--index.html
    Примечание: структуру файла config.yaml придумайте сами, его можно создать в любом текстовом редакторе «руками» (не программно);
    предусмотреть возможные исключительные ситуации, библиотеки использовать нельзя.
"""
import os

# расширять конфигурацию и хранить данные о вложенных папках и файлах (добавлять детали) можно заменив строки на словари:
# {'name': value_1,
#  'type': value_2,
#  'mode': value_3,
#  ...
#  }
# остальные папки тут сделаны просто для демонстрации, основная структура из задания создается.
dirs_struct = ('base_dir:',
               ('my_project:',
                       ('settings:',
                        'mainapp:',
                        'adminapp:',
                        'authapp:'
                        ),
                   'tst_1:',
                       ('tst_1_1:',
                        'tst_1_2:',
                        'tst_1_3:',
                            ('tst_1_3_1:',
                                 ('tst_1_3_1_1', ),  # это будет файл
                             'tst_1_3_2:'
                             ),
                        'tst_1_4:'
                    )
                   )
               )


# fso = file system object
def fso_name_from_tuple_gen(dir_list, root=''):
    for dir_name in dir_list:
        if isinstance(dir_name, tuple):
            yield from fso_name_from_tuple_gen(dir_name, cur_root)
        else:
            cur_root = os.path.join(root, dir_name) if root else dir_name
            yield cur_root


def fso_name_from_file_gen(file):
    with open(file, 'r') as f:
        for line in f:
            line = line.strip(os.linesep).replace('- ', '')
            if ':' in line:
                cur_sub_lvl = line.split(' ').count('') // 2
                base_dir = '' if cur_sub_lvl == 0 else os.path.join(*base_dir.split(os.path.sep)[:cur_sub_lvl])
                base_dir = os.path.join(base_dir, line.strip())
                yield base_dir
            else:
                yield os.path.join(base_dir, line.strip())


def make_fso(dir_name):
    # my_project:\mainapp:\templates:\mainapp:
    # my_project:\mainapp:\templates:\mainapp:\base.html
    try:
        if ':' in os.path.basename(dir_name):  # двоеточие = папка. позволяет создавать файлы без расширения
            os.mkdir(dir_name.replace(':', ''))
        else:
            open(dir_name.replace(':', ''), 'x').close()
    except FileExistsError as e:
        # тут можно делать и что-то другое: удалять папку и делать ее заново (очистка содержимого), стирать файл, ...
        # можно пользователя каждый раз спрашивать, можно только перед выполнением один раз спросить, ...
        # вариантов много =)
        print(f'"{e.filename}" уже существует')


def task_1(dirs):
    for fso_name in fso_name_from_tuple_gen(dirs):
        make_fso(fso_name)


def task_2(file_name):
    for fso_name in fso_name_from_file_gen(file_name):
        make_fso(fso_name)


if __name__ == '__main__':
    task_1(dirs_struct)
    task_2('config.yaml')

"""
3. Создать структуру файлов и папок, как написано в задании 2 (при помощи скрипта или «руками» в проводнике).
Написать скрипт, который собирает все шаблоны в одну папку templates, например:
|--my_project
   ...
   |--templates
   |   |--mainapp
   |   |  |--base.html
   |   |  |--index.html
   |   |--authapp
   |      |--base.html
   |      |--index.html
Примечание: исходные файлы необходимо оставить;
обратите внимание, что html-файлы расположены в родительских папках (они играют роль пространств имён);
предусмотреть возможные исключительные ситуации;
это реальная задача, которая решена, например, во фреймворке django.
"""

import os
from shutil import copy2

tmplt_dir = os.path.join('my_project', 'templates')
try:
    os.mkdir(tmplt_dir)
except FileExistsError as e:
    pass

for r, d, f in os.walk('my_project'):
    if 'templates' in r and tmplt_dir not in r:  # второе условие - чтобы не копирвать папку шаблонов саму в себя
        if 'templates' in os.path.basename(r):  # тут мы попали на что-то в духе my_project\authapp\templates
            for dir_name in d:
                os.makedirs(os.path.join(tmplt_dir, dir_name), exist_ok=True)  # makedirs из-за exist_ok, чтобы не писать try
        else:  # а тут мы уже где-то глубже. например my_project\authapp\templates\authapp
            for file_name in f:
                if file_name.endswith('.html'):
                    src_dir = r.split('templates')[1].lstrip(os.path.sep)
                    # мне это задание видится больше как бэкап шаблонов, поэтому считаю copy2 уместным
                    # так у нас в бэкапе будет актуальный файл с корректными датами
                    copy2(os.path.join(r, file_name), os.path.join(tmplt_dir, src_dir))

"""
4.  Написать скрипт, который выводит статистику для заданной папки в виде словаря,
    в котором ключи — верхняя граница размера файла (пусть будет кратна 10), а значения — общее количество файлов (в том числе и в подпапках),
    размер которых не превышает этой границы, но больше предыдущей (начинаем с 0), например:
        {
          100: 15,
          1000: 3,
          10000: 7,
          100000: 2
        }
    Тут 15 файлов размером не более 100 байт; 3 файла больше 100 и не больше 1000 байт...
    Подсказка: размер файла можно получить из атрибута .st_size объекта os.stat.
5.  *(вместо 4) Написать скрипт, который выводит статистику для заданной папки в виде словаря,
    в котором ключи те же, а значения — кортежи вида (<files_quantity>, [<files_extensions_list>]), например:
        {
          100: (15, ['txt']),
          1000: (3, ['py', 'txt']),
          10000: (7, ['html', 'css']),
          100000: (2, ['png', 'jpg'])
        }
    Сохраните результаты в файл <folder_name>_summary.json в той же папке, где запустили скрипт.
"""

import os
from collections import defaultdict
from json import dump

file_size_cnt = defaultdict(lambda: [0, set()])
file_size_cnt_dict = dict()


def get_size_for_dict(n):
    if not n:
        return 0
    cnt = 1
    while True:
        dict_size = 10 ** cnt
        if n < dict_size:
            return dict_size
        else:
            cnt += 1


for r, d, f in os.walk(os.getcwd()):
    with os.scandir(r) as sd:
        for element in sd:
            if element.is_file():
                size_key = get_size_for_dict(element.stat().st_size)
                file_size_cnt[size_key][0] += 1
                file_size_cnt[size_key][1].add(os.path.splitext(element.name)[1][1:])

for k, v in file_size_cnt.items():
    file_size_cnt_dict[k] = tuple((v[0], list(v[1])))

with open(os.path.join(os.getcwd(), 'task_5_dict.json'), 'w+') as f:
    dump(file_size_cnt_dict, f)